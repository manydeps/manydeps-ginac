# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl

    steps:
    - uses: actions/checkout@v3
    - uses: ilammy/msvc-dev-cmd@v1
    - name: Git Submodules
      run: |
        git submodule update --init --recursive
        git pull --recurse-submodules
    - name: Get python dependencies
      shell: bash
      run: |
        python3 -m pip install conan
    - name: Install ninja-build (Ubuntu)
      if: contains(matrix.os, 'ubuntu')
      run: |
        sudo apt-get install ninja-build -y
        sudo apt-get install autoconf automake libtool pkg-config -y
    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure VCPKG Dependencies (BASH)
      if: contains(matrix.os, 'ubuntu')
      run: |
        echo "RUNNING SCRIPT .\script-deps.sh"
        ./script-deps.sh
      shell: bash
      
    - name: CMake Configure (Windows)
      if: contains(matrix.os, 'windows')
      run: |
        echo "RUNNING CMAKE WINDOWS"
        cmake -B ${{ steps.strings.outputs.build-output-dir }} -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} -S ${{ github.workspace }} --preset=win-x64-release

    - name: CMake Configure (Ubuntu)
      if: contains(matrix.os, 'ubuntu')
      run: |
        echo "RUNNING VCPKG INSTALL"
        ./tools/vcpkg/bootstrap-vcpkg.sh
        ./tools/vcpkg/vcpkg --vcpkg-root ./tools/vcpkg/ integrate install
        ./tools/vcpkg/vcpkg --vcpkg-root ./tools/vcpkg/ install --triplet=x64-linux
        echo "RUNNING CMAKE UBUNTU"
        mkdir -p build/
        (cd build && cmake .. --preset=linux-release)

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test (Windows)
      if: contains(matrix.os, 'windows')
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      run: |
        echo "RUNNING my_test"
        .\my_test
        echo "RUNNING app_demo"
        .\app_demo

    - name: Test (Ubuntu)
      if: contains(matrix.os, 'ubuntu')
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      run: |
        echo "RUNNING my_test"
        ./my_test
        echo "RUNNING app_demo"
        ./app_demo
      
